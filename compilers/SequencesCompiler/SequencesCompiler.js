const fs = require('fs');
const path = require('path');

const xRegex = /%x%/gi;
const yRegex = /%y%/gi;
const mapTemplate = '\tm_notes.push_back(NoteData(sf::Vector2f(%x%, %y%)));';
const noteRegex = /\/\*notes\*\//gi;
const fileNameRegex = /NoteSequenceTemplate/gi;
const tempoRegex = /\/\*tempo\*\//gi
const musicFileNameRegex = /\/\*musicFileName\*\//gi
const generationwarningRegex = /\/\*generationwarning\*\//gi


const generationWarning = `
// AUTOGENERATED FILE
// DO NOTE EDIT
// UPDATE compilers/SequencesCompiler/Sequences AND RUN "make sequences-(debug|release)"`

const compile = () => {
    const sequenceFolderPath = path.resolve(__dirname, 'Sequences')
    const sequenceFiles = fs.readdirSync(sequenceFolderPath);

    sequenceFiles.filter(value => /\.json$/.test(value))

    const sequences = [];

    for (let i = 0; i < sequenceFiles.length; i++) {
        const fileName = sequenceFiles[i];
        if (/\.json$/.test(fileName)) {
            const sequence = JSON.parse(fs.readFileSync(path.resolve(sequenceFolderPath, fileName)));
            sequences.push(sequence);
        }
    }

    createSequences(sequences);
}

const createSequences = (sequences) => {
    const template = fs.readFileSync(path.resolve(__dirname, 'NoteSequenceTemplate.cpp'), 'utf8');
    const templateHeader = fs.readFileSync(path.resolve(__dirname, 'NoteSequenceTemplate.h'), 'utf8');

    const targetFolder = path.resolve(__dirname, '../..', 'world', 'sequences');

    for (let i = 0; i < sequences.length; i += 1) {
        const { meta, tempo, notes, musicFileName } = sequences[i];
        const { name } = meta;
        if (!name) throw new Error(`Sequence is missing meta name (sequence index: ${i})`);
        else process.stdout.write(`Compiling ${name} sequence`);

        className = name[0].toUpperCase() + name.substr(1) + 'NoteSequence';

        const header = templateHeader
            .replace(fileNameRegex, className)
            .replace(generationwarningRegex, generationWarning);
        fs.writeFileSync(path.resolve(targetFolder, `${className}.h`), header, 'utf8');

        const noteLines = notes.map((note) => {
            const { row, length } = note;
            return mapTemplate.replace(xRegex, length).replace(yRegex, row);
        });

        const cpp = template
            .replace(fileNameRegex, className)
            .replace(tempoRegex, `m_tempo = ${tempo};`)
            .replace(musicFileNameRegex, `m_musicFileName = "${musicFileName}";`)
            .replace(noteRegex, noteLines.join('\n'))
            .replace(generationwarningRegex, generationWarning);
        fs.writeFileSync(path.resolve(targetFolder, `${className}.cpp`), cpp, 'utf8');

        process.stdout.cursorTo(0);
        process.stdout.write(`Compiling ${name} sequence âœ“\n`);
    }
}

compile();
